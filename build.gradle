plugins {
    id 'idea'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'com.adarshr.test-logger' version '2.0.0'
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "org.jlleitschuh.gradle.ktlint" version "9.3.0"
    id 'jacoco'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
    maven { url "https://packages.confluent.io/maven/" }
    maven { url "https://repository.mulesoft.org/nexus/content/repositories/public/" }
}

javafx {
    version = "14"
    modules = ['javafx.controls', 'javafx.graphics']
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'kotlin-kapt'
apply plugin: 'org.openjfx.javafxplugin'

def arrow_version = "0.10.4"
def kotest_version = "4.1.1"
def koin_version = "2.1.6"

dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8'

    // Tornado
    implementation group: 'no.tornado', name: 'tornadofx', version: "1.7.20"

    // Arrow
    implementation group: 'io.arrow-kt', name: 'arrow-fx', version: "$arrow_version"
    implementation group: 'io.arrow-kt', name: 'arrow-syntax', version: "$arrow_version"
    kapt group: 'io.arrow-kt', name: 'arrow-meta', version: "$arrow_version"

    // Kafka
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.5.0'
    compile group: 'io.confluent', name: 'kafka-schema-registry', version: '5.5.1'

    // Avro
    compile group: 'io.confluent', name: 'kafka-avro-serializer', version: '5.5.1'

    // Koin
    implementation group: 'org.koin', name: 'koin-core', version: "$koin_version"
    implementation group: 'org.koin', name: 'koin-core-ext', version: "$koin_version"
    testImplementation group: 'org.koin', name: 'koin-test', version: "$koin_version"

    // Json
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    // Kotest
    testImplementation group: 'io.kotest', name: 'kotest-runner-junit5-jvm', version: "$kotest_version"
    testImplementation group: 'io.kotest', name: 'kotest-assertions-core-jvm', version: "$kotest_version"
    testImplementation group: 'io.kotest', name: 'kotest-property-jvm', version: "$kotest_version"
    testImplementation group: 'io.kotest', name: 'kotest-runner-junit5', version: "$kotest_version"
    testImplementation group: 'io.kotest', name: 'kotest-runner-console-jvm', version: "$kotest_version"
    testImplementation group: 'io.kotest', name: 'kotest-assertions-arrow', version: "$kotest_version"

    testImplementation group: 'io.mockk', name: 'mockk', version: '1.9'

}

test {
    useJUnitPlatform()
}

application {
    mainClassName = 'insulator.AppKt'
}

compileKotlin { kotlinOptions.jvmTarget = "1.8" }

compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }

jar {
    manifest {
        attributes(
                'Main-Class': 'insulator.AppKt'
        )
    }
}

import org.gradle.internal.os.OperatingSystem;

task packageApp(type: Exec) {
    group = 'jpackage'
    dependsOn 'shadowJar'
    def command = ['jpackage',
                   '--input', './build/libs',
                   '--main-jar', 'insulator-all.jar',
                   '-d', '.',
                   '--name', 'Insulator',
                   '--java-options', "'--enable-preview'",
                   '--app-version', "${System.getenv().get("RELEASE_VERSION") ?: "0.0.0"}"]
    if (OperatingSystem.current().isWindows()) {
        command.addAll('--icon', './assets/icon.ico')
    } else if (OperatingSystem.current().isMacOsX()) {
        command.addAll('--icon', './assets/icon.icns')
    } else command.addAll('--icon', './assets/icon.png')

    commandLine(command)
}

tasks.jacocoTestReport {
    reports { xml.setEnabled(true) }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'insulator/styles/**')
        }))
    }
}

tasks.check.doLast {
    tasks.jacocoTestReport
}