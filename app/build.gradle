plugins {
    id 'insulator.kotlin-application-conventions'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id "org.unbroken-dome.test-sets" version "3.0.1"
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx/" }
    maven { url "https://packages.confluent.io/maven/" }
    maven { url "https://repository.mulesoft.org/nexus/content/repositories/public/" }
}

javafx {
    version = "14"
    modules = ['javafx.controls', 'javafx.graphics', 'javafx.fxml']
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'kotlin-kapt'
apply plugin: 'org.openjfx.javafxplugin'


def testfx_version = "4.0.16-alpha"
def testcontainer_version = "1.14.3"

testSets { integrationTest }

dependencies {
    implementation project(":lib")
    // Tornado
    implementation(group: 'no.tornado', name: 'tornadofx', version: "1.7.20")

    // kotlinx-coroutines-javafx
    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-javafx', version: '1.4.0-M1')

    // JavaFX test helpers
    testCompile(group: 'org.testfx', name: 'testfx-junit5', version: "$testfx_version")

    // Test Containers
    integrationTestImplementation(group: 'junit', name: 'junit', version: '4.13.1')
    integrationTestImplementation(group: 'org.testcontainers', name: 'kafka', version: "$testcontainer_version")
}

application { mainClassName = 'insulator.AppKt' }

jar { manifest { attributes('Main-Class': 'insulator.AppKt') } }

import org.gradle.internal.os.OperatingSystem

task packageApp(type: Exec) {
    group = 'jpackage'
    dependsOn 'shadowJar'

    // build command
    def appVersion = "${System.getenv().get("RELEASE_VERSION") ?: "0.0.0"}"
    def command = ['jpackage', '--input', './build/libs', '--main-jar', 'insulator-all.jar', '-d', '.',
                   '--name', 'Insulator', '--java-options', "'--enable-preview'", '--app-version', appVersion]

    // customization for each OS
    if (OperatingSystem.current().isWindows()) command.addAll('--icon', './assets/icon.ico', '--win-dir-chooser', '--win-menu')
    else if (OperatingSystem.current().isMacOsX()) command.addAll('--icon', './assets/icon.icns')
    else command.addAll('--icon', './assets/icon.png', '--linux-shortcut')

    // run command
    commandLine(command)
}

tasks.jacocoTestReport {
    reports { xml.setEnabled(true) }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['insulator/ui/**', 'insulator/views/**'])
        }))
    }
}

project.integrationTest { outputs.upToDateWhen { false } }

check.dependsOn test
check.doLast { tasks.jacocoTestReport }

compileKotlin { kotlinOptions.jvmTarget = "1.8" }
compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }